// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/pinai4/spaceship-factory/inventory/internal/model"
	mock "github.com/stretchr/testify/mock"
)

// PartRepository is an autogenerated mock type for the PartRepository type
type PartRepository struct {
	mock.Mock
}

type PartRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *PartRepository) EXPECT() *PartRepository_Expecter {
	return &PartRepository_Expecter{mock: &_m.Mock}
}

// Add provides a mock function with given fields: ctx, part
func (_m *PartRepository) Add(ctx context.Context, part model.Part) error {
	ret := _m.Called(ctx, part)

	if len(ret) == 0 {
		panic("no return value specified for Add")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.Part) error); ok {
		r0 = rf(ctx, part)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PartRepository_Add_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Add'
type PartRepository_Add_Call struct {
	*mock.Call
}

// Add is a helper method to define mock.On call
//   - ctx context.Context
//   - part model.Part
func (_e *PartRepository_Expecter) Add(ctx interface{}, part interface{}) *PartRepository_Add_Call {
	return &PartRepository_Add_Call{Call: _e.mock.On("Add", ctx, part)}
}

func (_c *PartRepository_Add_Call) Run(run func(ctx context.Context, part model.Part)) *PartRepository_Add_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.Part))
	})
	return _c
}

func (_c *PartRepository_Add_Call) Return(_a0 error) *PartRepository_Add_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PartRepository_Add_Call) RunAndReturn(run func(context.Context, model.Part) error) *PartRepository_Add_Call {
	_c.Call.Return(run)
	return _c
}

// Get provides a mock function with given fields: ctx, uuid
func (_m *PartRepository) Get(ctx context.Context, uuid string) (model.Part, error) {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 model.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.Part, error)); ok {
		return rf(ctx, uuid)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.Part); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Get(0).(model.Part)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, uuid)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartRepository_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type PartRepository_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *PartRepository_Expecter) Get(ctx interface{}, uuid interface{}) *PartRepository_Get_Call {
	return &PartRepository_Get_Call{Call: _e.mock.On("Get", ctx, uuid)}
}

func (_c *PartRepository_Get_Call) Run(run func(ctx context.Context, uuid string)) *PartRepository_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *PartRepository_Get_Call) Return(_a0 model.Part, _a1 error) *PartRepository_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PartRepository_Get_Call) RunAndReturn(run func(context.Context, string) (model.Part, error)) *PartRepository_Get_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function with given fields: ctx, filter
func (_m *PartRepository) List(ctx context.Context, filter model.PartsFilter) ([]model.Part, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []model.Part
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.PartsFilter) ([]model.Part, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.PartsFilter) []model.Part); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Part)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.PartsFilter) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PartRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type PartRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
//   - ctx context.Context
//   - filter model.PartsFilter
func (_e *PartRepository_Expecter) List(ctx interface{}, filter interface{}) *PartRepository_List_Call {
	return &PartRepository_List_Call{Call: _e.mock.On("List", ctx, filter)}
}

func (_c *PartRepository_List_Call) Run(run func(ctx context.Context, filter model.PartsFilter)) *PartRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(model.PartsFilter))
	})
	return _c
}

func (_c *PartRepository_List_Call) Return(_a0 []model.Part, _a1 error) *PartRepository_List_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PartRepository_List_Call) RunAndReturn(run func(context.Context, model.PartsFilter) ([]model.Part, error)) *PartRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// NewPartRepository creates a new instance of PartRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPartRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *PartRepository {
	mock := &PartRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
